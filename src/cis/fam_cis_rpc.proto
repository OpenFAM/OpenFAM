/*
 * fam_cis_rpc.proto
 * Copyright (c) 2019 Hewlett Packard Enterprise Development, LP. All rights
 * reserved. Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 *    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See https://spdx.org/licenses/BSD-3-Clause
 *
 */

syntax = "proto3";

/*
 *define services for RPC methods
 */
service Fam_CIS_Rpc {
    rpc create_region(Fam_Region_Request) returns (Fam_Region_Response) {}
    rpc destroy_region(Fam_Region_Request) returns (Fam_Region_Response) {}
    rpc resize_region(Fam_Region_Request) returns (Fam_Region_Response) {}
    rpc allocate(Fam_Dataitem_Request) returns (Fam_Dataitem_Response) {}
    rpc deallocate(Fam_Dataitem_Request) returns (Fam_Dataitem_Response) {}

    rpc change_region_permission(Fam_Region_Request)
        returns (Fam_Region_Response) {}
    rpc change_dataitem_permission(Fam_Dataitem_Request)
        returns (Fam_Dataitem_Response) {}

    rpc lookup_region(Fam_Region_Request) returns (Fam_Region_Response) {}
    rpc lookup(Fam_Dataitem_Request) returns (Fam_Dataitem_Response) {}

    rpc check_permission_get_region_info(Fam_Region_Request)
        returns (Fam_Region_Response) {}
    rpc check_permission_get_item_info(Fam_Dataitem_Request)
        returns (Fam_Dataitem_Response) {}
    rpc get_stat_info(Fam_Dataitem_Request)
        returns (Fam_Dataitem_Response) {}

    rpc copy(Fam_Copy_Request) returns (Fam_Copy_Response) {}

    rpc acquire_CAS_lock(Fam_Dataitem_Request)
        returns (Fam_Dataitem_Response) {}
    rpc release_CAS_lock(Fam_Dataitem_Request)
        returns (Fam_Dataitem_Response) {}

    rpc reset_profile(Fam_Request) returns (Fam_Response) {}
    rpc generate_profile(Fam_Request) returns (Fam_Response) {}
    rpc signal_start(Fam_Request) returns (Fam_Start_Response) {}

    rpc signal_termination(Fam_Request) returns (Fam_Response) {}
}

/*
 * Request message used by methods signal_start and signal_termination
 */
message Fam_Request {}

/*
 * Response message used by methods signal_start and signal_termination
 */
message Fam_Response {}

/*
 * Response message used by methods signal_start
 * addrname : memory server addrname string from libfabric
 * addrnamelen : size of addrname
 */
message Fam_Start_Response {
    repeated fixed32 addrname = 1;
    uint64 addrnamelen = 2;
}

/*
 * Message structure for FAM region request
 * regionid : Region Id of the region
 * offset : INVALID in this case
 */
message Fam_Region_Request {
    uint64 regionid = 1;
    uint64 offset = 2;
    uint32 uid = 3;
    uint32 gid = 4;
    uint64 perm = 5;
    string name = 6;
    uint64 size = 7;
}

/*
 * Message structure for FAM region response
 * regionid : Region Id of the region
 * offset : INVALID in this case
 */
message Fam_Region_Response {
    uint64 regionid = 1;
    uint64 offset = 2;
    uint64 size = 3;
    int32 errorcode = 4;
    string errormsg = 5;
    string name = 6;
    uint64 perm = 7;
}

/*
 * Message structure for FAM dataitem request
 * regionid : Region Id of the region
 * offset : INVALID in this case
 */
message Fam_Dataitem_Request {
    uint64 regionid = 1;
    uint64 offset = 2;
    uint32 uid = 3;
    uint32 gid = 4;
    uint64 perm = 5;
    string name = 6;
    string regionname = 7;
    uint64 size = 8;
    uint64 key = 9;
    uint64 base = 10;
    bool dup = 11;
}

/*
 * Message structure for FAM dataitem response
 * regionid : Region Id of the region
 * offset : INVALID in this case
 */
message Fam_Dataitem_Response {
    uint64 regionid = 1;
    uint64 offset = 2;
    uint64 size = 3;
    uint64 key = 4;
    uint64 base = 5;
    int32 errorcode = 6;
    string errormsg = 7;
    string name = 8;
    uint64 perm = 9;
}

message Fam_Copy_Request {
    uint64 srcregionid = 1;
    uint64 destregionid = 2;
    uint64 srcoffset = 3;
    uint64 destoffset = 4;
    uint64 srccopystart = 5;
    uint64 destcopystart = 6;
    uint32 uid = 7;
    uint32 gid = 8;
    uint64 copysize = 9;
}

message Fam_Copy_Response {
    int32 errorcode = 1;
    string errormsg = 2;
}
